import axios from 'axios';
import { API_CONFIG } from '../config';

/**
 * Edit an image based on instructions using Stability AI
 */
export const editImage = async (
  imageBase64: string,
  instructions: string,
  mimeType: string = 'image/jpeg'
) => {
  try {
    // Use direct environment variable instead of missing config property
    const apiKey = process.env.STABILITY_API_KEY || '';
    
    if (!apiKey) {
      throw new Error('Stability AI API key is not configured');
    }
    
    // Prepare the API URL for Stability AI image-to-image endpoint
    const apiUrl = 'https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/image-to-image';
    
    // Convert base64 to Buffer if it includes the data URL prefix
    let imageData = imageBase64;
    if (imageBase64.includes('base64,')) {
      imageData = imageBase64.split('base64,')[1];
    }
    
    // Create form data for multipart request
    const formData = new FormData();
    
    // Add the prompt including instructions
    formData.append('text_prompts[0][text]', instructions);
    formData.append('text_prompts[0][weight]', '1.0');
    
    // Add negative prompt for better quality
    formData.append('text_prompts[1][text]', 'blurry, distorted, low quality, unrealistic, ugly, deformed');
    formData.append('text_prompts[1][weight]', '-0.5');
    
    // Create a Blob from the base64 data
    const byteCharacters = atob(imageData);
    const byteArrays = [];
    
    for (let offset = 0; offset < byteCharacters.length; offset += 1024) {
      const slice = byteCharacters.slice(offset, offset + 1024);
      
      const byteNumbers = new Array(slice.length);
      for (let i = 0; i < slice.length; i++) {
        byteNumbers[i] = slice.charCodeAt(i);
      }
      
      const byteArray = new Uint8Array(byteNumbers);
      byteArrays.push(byteArray);
    }
    
    const blob = new Blob(byteArrays, { type: mimeType });
    formData.append('init_image', blob);
    
    // Set image-to-image parameters
    formData.append('image_strength', '0.35'); // Controls how much to preserve the original image
    formData.append('cfg_scale', '7'); // How strictly to follow the prompt
    formData.append('samples', '1'); // Number of images to generate
    formData.append('steps', '30'); // Number of diffusion steps
    
    // Make the API request
    const response = await axios.post(apiUrl, formData, {
      headers: {
        'Accept': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      }
    });
    
    if (!response.data || !response.data.artifacts || response.data.artifacts.length === 0) {
      throw new Error('No image generated by Stability AI');
    }
    
    // Return the base64 image
    return response.data.artifacts[0].base64;
  } catch (error) {
    console.error('Error editing image with Stability AI:', error);
    throw error;
  }
};

// Add API key access to the default export using environment variable
export default {
  editImage,
  apiKey: process.env.STABILITY_API_KEY || ''
}; 