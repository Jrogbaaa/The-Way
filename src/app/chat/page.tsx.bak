'use client';

import { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import MainLayout from '@/components/layout/MainLayout';

// Define ChatSession interface directly to avoid dependency on replicateChat module
interface ChatSession {
  messages: Array<{
    role: 'user' | 'assistant';
    content: string;
  }>;
}

type Message = {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
};

// Sample chat data
const sampleChats: Record<string, {
  id: string;
  name: string;
  description: string;
  messages: Message[];
  chatSession?: ChatSession;
}> = {
  current: {
    id: 'current',
    name: 'Social Media Strategy',
    description: 'Current conversation',
    messages: [
      {
        id: '1',
        role: 'assistant',
        content: "Hello! I'm your Social Media Expert. I have 10+ years of experience across all major platforms. How can I help with your social media strategy today?",
        timestamp: new Date(),
      }
    ]
  },
  contentCalendar: {
    id: 'contentCalendar',
    name: 'Content Calendar',
    description: 'Monthly planning',
    messages: [
      {
        id: '1',
        role: 'assistant',
        content: "Hello! I'm your Social Media Expert. How can I help with your content calendar today?",
        timestamp: new Date(Date.now() - 3600000),
      },
      {
        id: '2',
        role: 'user',
        content: "I need help creating a content calendar for my fitness brand. We post on Instagram and TikTok.",
        timestamp: new Date(Date.now() - 3500000),
      },
      {
        id: '3',
        role: 'assistant',
        content: "I'd be happy to help you create a content calendar for your fitness brand! Here's a weekly framework you can follow for Instagram and TikTok:\n\n**Monday - Motivation**\n- Instagram: Inspirational quote with a high-quality fitness image\n- TikTok: 30-second motivational speech with workout background\n\n**Tuesday - Tutorial**\n- Instagram: Carousel of exercise technique breakdown\n- TikTok: 60-second exercise tutorial video\n\n**Wednesday - Wellness**\n- Instagram: Nutrition tip or healthy recipe\n- TikTok: Quick healthy meal prep video\n\n**Thursday - Transformation**\n- Instagram: Before/after or client success story\n- TikTok: Client testimonial or transformation journey\n\n**Friday - Fitness Challenge**\n- Instagram: Weekend workout challenge announcement\n- TikTok: Demo of the challenge with upbeat music\n\n**Saturday - Community**\n- Instagram: Repost follower content or Q&A\n- TikTok: Answer follower questions or community highlights\n\n**Sunday - Planning**\n- Instagram: Week ahead preview or weekly tips\n- TikTok: \"Get ready with me\" style week preparation\n\nWould you like more specific content ideas for any of these categories?",
        timestamp: new Date(Date.now() - 3400000),
      }
    ],
    chatSession: {
      messages: [
        { role: 'assistant', content: "Hello! I'm your Social Media Expert. How can I help with your content calendar today?" },
        { role: 'user', content: "I need help creating a content calendar for my fitness brand. We post on Instagram and TikTok." },
        { role: 'assistant', content: "I'd be happy to help you create a content calendar for your fitness brand! Here's a weekly framework you can follow for Instagram and TikTok:\n\n**Monday - Motivation**\n- Instagram: Inspirational quote with a high-quality fitness image\n- TikTok: 30-second motivational speech with workout background\n\n**Tuesday - Tutorial**\n- Instagram: Carousel of exercise technique breakdown\n- TikTok: 60-second exercise tutorial video\n\n**Wednesday - Wellness**\n- Instagram: Nutrition tip or healthy recipe\n- TikTok: Quick healthy meal prep video\n\n**Thursday - Transformation**\n- Instagram: Before/after or client success story\n- TikTok: Client testimonial or transformation journey\n\n**Friday - Fitness Challenge**\n- Instagram: Weekend workout challenge announcement\n- TikTok: Demo of the challenge with upbeat music\n\n**Saturday - Community**\n- Instagram: Repost follower content or Q&A\n- TikTok: Answer follower questions or community highlights\n\n**Sunday - Planning**\n- Instagram: Week ahead preview or weekly tips\n- TikTok: \"Get ready with me\" style week preparation\n\nWould you like more specific content ideas for any of these categories?" }
      ]
    }
  },
  hashtagResearch: {
    id: 'hashtagResearch',
    name: 'Hashtag Research',
    description: 'Trending topics for health',
    messages: [
      {
        id: '1',
        role: 'assistant',
        content: "Hello! I'm your Social Media Expert. How can I help with hashtag research today?",
        timestamp: new Date(Date.now() - 7200000),
      },
      {
        id: '2',
        role: 'user',
        content: "What hashtags should I use for my health and wellness content on Instagram?",
        timestamp: new Date(Date.now() - 7100000),
      },
      {
        id: '3',
        role: 'assistant',
        content: "For health and wellness content on Instagram, I recommend using a strategic mix of popular, moderately competitive, and niche hashtags. Here's a curated list:\n\n**Popular Hashtags** (use 1-3 from this category):\n- #healthandwellness (17M+ posts)\n- #wellness (38M+ posts)\n- #selfcare (26M+ posts)\n- #healthylifestyle (45M+ posts)\n- #mindfulness (27M+ posts)\n\n**Medium Competition** (use 5-7 from this category):\n- #wellnessjourney (2-5M posts)\n- #holistichealth (4M+ posts)\n- #mentalhealthawareness (7M+ posts)\n- #wellnesstips (1M+ posts)\n- #healthtips (2M+ posts)\n- #mindandbody (3M+ posts)\n- #selfcareday (1M+ posts)\n\n**Niche/Specific** (use 7-10 from this category):\n- #dailywellnessroutine (under 500K posts)\n- #wellnesscoach (under 1M posts)\n- #wellnesscommunity (under 800K posts)\n- #healthandwellnessblogger (under 300K posts)\n- #wellnesswarrior (under 700K posts)\n- #wellnesslifestyle (under 1M posts)\n- #mindfuleating (under 500K posts)\n- #wellnessadvocate (under 200K posts)\n\n**Trending Health Topics 2024** (rotate these based on your content):\n- #immunehealth\n- #gutmicrobiome\n- #sleepoptimization\n- #stressmanagement\n- #functionalfitness\n- #mindsetshift\n\nFor best results, I recommend:\n1. Creating a few sets of 20-30 hashtags and rotating them\n2. Including location-based hashtags if relevant (like #NYCwellness)\n3. Creating a branded hashtag for your content\n4. Updating your hashtag research monthly as trends change\n\nWould you like me to suggest some hashtag combinations for specific types of health and wellness content?",
        timestamp: new Date(Date.now() - 7000000),
      }
    ],
    chatSession: {
      messages: [
        { role: 'assistant', content: "Hello! I'm your Social Media Expert. How can I help with hashtag research today?" },
        { role: 'user', content: "What hashtags should I use for my health and wellness content on Instagram?" },
        { role: 'assistant', content: "For health and wellness content on Instagram, I recommend using a strategic mix of popular, moderately competitive, and niche hashtags. Here's a curated list:\n\n**Popular Hashtags** (use 1-3 from this category):\n- #healthandwellness (17M+ posts)\n- #wellness (38M+ posts)\n- #selfcare (26M+ posts)\n- #healthylifestyle (45M+ posts)\n- #mindfulness (27M+ posts)\n\n**Medium Competition** (use 5-7 from this category):\n- #wellnessjourney (2-5M posts)\n- #holistichealth (4M+ posts)\n- #mentalhealthawareness (7M+ posts)\n- #wellnesstips (1M+ posts)\n- #healthtips (2M+ posts)\n- #mindandbody (3M+ posts)\n- #selfcareday (1M+ posts)\n\n**Niche/Specific** (use 7-10 from this category):\n- #dailywellnessroutine (under 500K posts)\n- #wellnesscoach (under 1M posts)\n- #wellnesscommunity (under 800K posts)\n- #healthandwellnessblogger (under 300K posts)\n- #wellnesswarrior (under 700K posts)\n- #wellnesslifestyle (under 1M posts)\n- #mindfuleating (under 500K posts)\n- #wellnessadvocate (under 200K posts)\n\n**Trending Health Topics 2024** (rotate these based on your content):\n- #immunehealth\n- #gutmicrobiome\n- #sleepoptimization\n- #stressmanagement\n- #functionalfitness\n- #mindsetshift\n\nFor best results, I recommend:\n1. Creating a few sets of 20-30 hashtags and rotating them\n2. Including location-based hashtags if relevant (like #NYCwellness)\n3. Creating a branded hashtag for your content\n4. Updating your hashtag research monthly as trends change\n\nWould you like me to suggest some hashtag combinations for specific types of health and wellness content?" }
      ]
    }
  },
  videoScriptIdeas: {
    id: 'videoScriptIdeas',
    name: 'Video Script Ideas',
    description: 'Short-form content',
    messages: [
      {
        id: '1',
        role: 'assistant',
        content: "Hello! I'm your Social Media Expert. How can I help with video script ideas today?",
        timestamp: new Date(Date.now() - 14400000),
      },
      {
        id: '2',
        role: 'user',
        content: "I need ideas for short-form video content for my tech product review channel.",
        timestamp: new Date(Date.now() - 14300000),
      },
      {
        id: '3',
        role: 'assistant',
        content: "Here are 10 engaging short-form video ideas for your tech product review channel that work well on platforms like TikTok, Instagram Reels, and YouTube Shorts:\n\n1. **The 30-Second Review**\n   - Script Structure: Quick intro → 3 key features → final verdict\n   - Hook: \"Is the new [Product] worth the hype? Let me break it down in 30 seconds.\"\n\n2. **Expectations vs. Reality**\n   - Script Structure: Marketing claim → your actual experience (split screen)\n   - Hook: \"[Brand] says this can [do X]. Let's see what really happens.\"\n\n3. **Hidden Features Series**\n   - Script Structure: Introduce popular product → reveal lesser-known feature → demonstrate use case\n   - Hook: \"The hidden [Product] feature that nobody talks about...\"\n\n4. **Tech Myths Debunked**\n   - Script Structure: State common belief → test it on camera → reveal truth\n   - Hook: \"Everyone says [myth about product]. Let's test if that's actually true.\"\n\n5. **Honest Pros & Cons in 60 Seconds**\n   - Script Structure: Brief product intro → 3 pros → 3 cons → who should buy\n   - Hook: \"The good, the bad, and the ugly about the new [Product].\"\n\n6. **Price Tier Comparisons**\n   - Script Structure: Show budget, mid-range, premium options → key differences → value pick\n   - Hook: \"$50 vs $200 vs $500: Which [product] is actually worth your money?\"\n\n7. **Day in the Life with [Product]**\n   - Script Structure: Morning use → afternoon use → evening use → verdict\n   - Hook: \"I used the new [Product] for everything for 24 hours. Here's what happened.\"\n\n8. **5 Accessories You NEED for [Popular Device]**\n   - Script Structure: Problem → accessory solution → quick demo of each\n   - Hook: \"These 5 accessories make your [Device] 10x better.\"\n\n9. **Tech Hacks in 60 Seconds**\n   - Script Structure: Problem statement → quick solution → demonstration\n   - Hook: \"The [Product] hack that changed my life.\"\n\n10. **Unboxing ASMR with Voiceover Review**\n    - Script Structure: Satisfying unboxing sounds → whispered first impressions → key feature highlight\n    - Hook: \"The most satisfying [Product] unboxing you'll ever hear.\"\n\nFor each of these formats, I recommend:\n- First 3 seconds should contain your hook\n- Keep scripts to 150 words or less for a 60-second video\n- End with a question to boost engagement\n- Include text overlays for key points\n\nWhich of these formats would you like me to develop into a full script example?",
        timestamp: new Date(Date.now() - 14200000),
      }
    ],
    chatSession: {
      messages: [
        { role: 'assistant', content: "Hello! I'm your Social Media Expert. How can I help with video script ideas today?" },
        { role: 'user', content: "I need ideas for short-form video content for my tech product review channel." },
        { role: 'assistant', content: "Here are 10 engaging short-form video ideas for your tech product review channel that work well on platforms like TikTok, Instagram Reels, and YouTube Shorts:\n\n1. **The 30-Second Review**\n   - Script Structure: Quick intro → 3 key features → final verdict\n   - Hook: \"Is the new [Product] worth the hype? Let me break it down in 30 seconds.\"\n\n2. **Expectations vs. Reality**\n   - Script Structure: Marketing claim → your actual experience (split screen)\n   - Hook: \"[Brand] says this can [do X]. Let's see what really happens.\"\n\n3. **Hidden Features Series**\n   - Script Structure: Introduce popular product → reveal lesser-known feature → demonstrate use case\n   - Hook: \"The hidden [Product] feature that nobody talks about...\"\n\n4. **Tech Myths Debunked**\n   - Script Structure: State common belief → test it on camera → reveal truth\n   - Hook: \"Everyone says [myth about product]. Let's test if that's actually true.\"\n\n5. **Honest Pros & Cons in 60 Seconds**\n   - Script Structure: Brief product intro → 3 pros → 3 cons → who should buy\n   - Hook: \"The good, the bad, and the ugly about the new [Product].\"\n\n6. **Price Tier Comparisons**\n   - Script Structure: Show budget, mid-range, premium options → key differences → value pick\n   - Hook: \"$50 vs $200 vs $500: Which [product] is actually worth your money?\"\n\n7. **Day in the Life with [Product]**\n   - Script Structure: Morning use → afternoon use → evening use → verdict\n   - Hook: \"I used the new [Product] for everything for 24 hours. Here's what happened.\"\n\n8. **5 Accessories You NEED for [Popular Device]**\n   - Script Structure: Problem → accessory solution → quick demo of each\n   - Hook: \"These 5 accessories make your [Device] 10x better.\"\n\n9. **Tech Hacks in 60 Seconds**\n   - Script Structure: Problem statement → quick solution → demonstration\n   - Hook: \"The [Product] hack that changed my life.\"\n\n10. **Unboxing ASMR with Voiceover Review**\n    - Script Structure: Satisfying unboxing sounds → whispered first impressions → key feature highlight\n    - Hook: \"The most satisfying [Product] unboxing you'll ever hear.\"\n\nFor each of these formats, I recommend:\n- First 3 seconds should contain your hook\n- Keep scripts to 150 words or less for a 60-second video\n- End with a question to boost engagement\n- Include text overlays for key points\n\nWhich of these formats would you like me to develop into a full script example?" }
      ]
    }
  }
};

export default function ChatPage() {
  const [activeChat, setActiveChat] = useState('current');
  const [messages, setMessages] = useState<Message[]>(sampleChats.current.messages);
  const [newMessage, setNewMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [chatSession, setChatSession] = useState<ChatSession | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Auto-scroll to bottom when messages update
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Load chat data when active chat changes
  useEffect(() => {
    const selectedChat = sampleChats[activeChat];
    setMessages(selectedChat.messages);
    setChatSession(selectedChat.chatSession || null);
  }, [activeChat]);

  const handleSendMessage = async () => {
    if (!newMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: newMessage.trim(),
      timestamp: new Date(),
    };
    
    setMessages(prev => [...prev, userMessage]);
    setNewMessage('');
    setIsLoading(true);
    
    try {
      // Call our chat API
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: userMessage.content,
          chatHistory: chatSession,
        }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to generate response');
      }
      
      // Save the updated chat session for context
      setChatSession(data.chatSession);
      
      // Add the AI response to messages
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: data.response,
        timestamp: new Date(),
      };
      
      setMessages(prev => [...prev, aiResponse]);
    } catch (error) {
      console.error('Error getting chat response:', error);
      
      // Add error message
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: "I'm sorry, I encountered an error processing your request. Please try again later.",
        timestamp: new Date(),
      };
      
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleStartNewChat = () => {
    setActiveChat('current');
    setMessages(sampleChats.current.messages);
    setChatSession(null);
  };

  const handleSelectChat = (chatId: string) => {
    setActiveChat(chatId);
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  return (
    <MainLayout>
      <div className="flex flex-col h-[calc(100vh-4rem)]">
        <div className="flex items-center justify-between mb-4">
          <h1 className="text-2xl font-bold">Chat with the Agent</h1>
          <Button variant="outline" onClick={handleStartNewChat}>Start New Chat</Button>
        </div>
        
        <div className="flex flex-1 overflow-hidden">
          {/* Chat sidebar */}
          <div className="hidden md:block w-64 border-r border-gray-200 dark:border-gray-800 overflow-y-auto">
            <div className="p-4">
              <Button className="w-full justify-start" variant="outline" onClick={handleStartNewChat}>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <line x1="12" y1="5" x2="12" y2="19"></line>
                  <line x1="5" y1="12" x2="19" y2="12"></line>
                </svg>
                New Chat
              </Button>
            </div>
            <div className="px-3 py-2">
              <h2 className="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">Recent Chats</h2>
              <div className="space-y-1">
                <button 
                  className={`w-full text-left py-2 px-3 rounded-md ${activeChat === 'current' ? 'bg-blue-50 text-blue-600 dark:bg-blue-900 dark:text-blue-200' : 'hover:bg-gray-100 dark:hover:bg-gray-800'}`}
                  onClick={() => handleSelectChat('current')}
                >
                  <p className="font-medium truncate">{sampleChats.current.name}</p>
                  <p className="text-xs text-gray-500 dark:text-gray-400 truncate">{sampleChats.current.description}</p>
                </button>
                <button 
                  className={`w-full text-left py-2 px-3 rounded-md ${activeChat === 'contentCalendar' ? 'bg-blue-50 text-blue-600 dark:bg-blue-900 dark:text-blue-200' : 'hover:bg-gray-100 dark:hover:bg-gray-800'}`}
                  onClick={() => handleSelectChat('contentCalendar')}
                >
                  <p className="font-medium truncate">{sampleChats.contentCalendar.name}</p>
                  <p className="text-xs text-gray-500 dark:text-gray-400 truncate">{sampleChats.contentCalendar.description}</p>
                </button>
                <button 
                  className={`w-full text-left py-2 px-3 rounded-md ${activeChat === 'hashtagResearch' ? 'bg-blue-50 text-blue-600 dark:bg-blue-900 dark:text-blue-200' : 'hover:bg-gray-100 dark:hover:bg-gray-800'}`}
                  onClick={() => handleSelectChat('hashtagResearch')}
                >
                  <p className="font-medium truncate">{sampleChats.hashtagResearch.name}</p>
                  <p className="text-xs text-gray-500 dark:text-gray-400 truncate">{sampleChats.hashtagResearch.description}</p>
                </button>
                <button 
                  className={`w-full text-left py-2 px-3 rounded-md ${activeChat === 'videoScriptIdeas' ? 'bg-blue-50 text-blue-600 dark:bg-blue-900 dark:text-blue-200' : 'hover:bg-gray-100 dark:hover:bg-gray-800'}`}
                  onClick={() => handleSelectChat('videoScriptIdeas')}
                >
                  <p className="font-medium truncate">{sampleChats.videoScriptIdeas.name}</p>
                  <p className="text-xs text-gray-500 dark:text-gray-400 truncate">{sampleChats.videoScriptIdeas.description}</p>
                </button>
              </div>
            </div>
          </div>
          
          {/* Chat main area */}
          <div className="flex-1 flex flex-col">
            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.map((message) => (
                <div 
                  key={message.id} 
                  className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div 
                    className={`max-w-[80%] rounded-lg p-4 ${
                      message.role === 'user' 
                        ? 'bg-blue-600 text-white' 
                        : 'bg-gray-100 dark:bg-gray-800 dark:text-white'
                    }`}
                  >
                    <div className="whitespace-pre-wrap">{message.content}</div>
                    <div 
                      className={`text-xs mt-1 ${
                        message.role === 'user' 
                          ? 'text-blue-200' 
                          : 'text-gray-500 dark:text-gray-400'
                      }`}
                    >
                      {formatTime(message.timestamp)}
                    </div>
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
            
            {/* Input area */}
            <div className="border-t border-gray-200 dark:border-gray-800 p-4">
              <div className="flex items-end gap-2">
                <div className="flex-1 border border-gray-300 dark:border-gray-700 rounded-lg overflow-hidden focus-within:ring-2 focus-within:ring-blue-500">
                  <textarea
                    rows={3}
                    placeholder="Ask the Social Media Expert anything..."
                    className="w-full px-3 py-2 focus:outline-none resize-none bg-transparent"
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        handleSendMessage();
                      }
                    }}
                    disabled={isLoading}
                  />
                  <div className="flex justify-between items-center px-3 py-2 bg-gray-50 dark:bg-gray-800">
                    <div className="flex gap-2">
                      <button className="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                          <polyline points="15 3 21 3 21 9"></polyline>
                          <line x1="10" y1="14" x2="21" y2="3"></line>
                        </svg>
                      </button>
                      <button className="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                          <circle cx="8.5" cy="8.5" r="1.5"></circle>
                          <polyline points="21 15 16 10 5 21"></polyline>
                        </svg>
                      </button>
                      <button className="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
                          <path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path>
                        </svg>
                      </button>
                    </div>
                    <div className="text-xs text-gray-500">
                      Press <kbd className="px-1 py-0.5 rounded border border-gray-300 bg-gray-100 dark:border-gray-600 dark:bg-gray-700">Enter</kbd> to send
                    </div>
                  </div>
                </div>
                <Button 
                  onClick={handleSendMessage} 
                  className="h-10 px-4"
                  disabled={isLoading || !newMessage.trim()}
                >
                  {isLoading ? (
                    <div className="h-5 w-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  ) : (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <line x1="22" y1="2" x2="11" y2="13"></line>
                      <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                    </svg>
                  )}
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </MainLayout>
  );
} 